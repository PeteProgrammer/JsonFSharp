%{
open JsonFSharp
%}

%start start
%token <string> STRING
%token <double> DOUBLE
%token <string> EXCEPTION
%token <bool> BOOL
%token NULL
%token LBRAC RBRAC LBRACE RBRACE COMMA COLON
%token EOF
%type < JsonFSharp.ParseResult > start
%%

start: 
    | value EOF { Success $1 }
    | EXCEPTION { Failure $1 }

value:
    | STRING    { JsonString $1 }
    | DOUBLE    { JsonNumber $1 }
    | BOOL      { JsonBool $1 }
    | NULL      { JsonNull }
    | LBRAC
      arrayRev
      RBRAC     { JsonArray ($2 |> List.rev) }
    | LBRACE
      properties
      RBRACE    { JsonObject $2 }

arrayRev:
    |           { [] }
    | value     { [$1] }
    | arrayRev 
      COMMA
      value     { $3::$1 }

property:
    | STRING
      COLON
      value     { ($1,$3) }

properties:
    |           { Map.empty }
    | property  { let (key,value) = $1
                  Map.empty |> Map.add key value }
    | properties
      COMMA
      property  { let (key,value) = $3
                  $1 |> Map.add key value }
