{
module JsonFSharp.Lexer
open JsonFSharp.Parsers
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
let lexeme = Lexing.LexBuffer<_>.LexemeString 
}
let digit = ['0'-'9']
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')


rule token = parse
| "\""          { parseString [] lexbuf }
| _
                {
                    let exceptionString = System.String.Format("Unrecognized character at line {0} column {1}",
                                                            lexbuf.EndPos.Line + 1,
                                                            lexbuf.EndPos.Column)
                    EXCEPTION exceptionString
                } 
| eof			{ EOF }
and parseString state = parse
| [^ '\\' '"']*     { let str = lexeme lexbuf
                      parseString (str::state) lexbuf }
| '\\'              { parseEscapeCharacter state lexbuf }
| '"'               { let str = state |> List.rev |> List.reduce (+) 
                      STRING(str) } 
and parseEscapeCharacter state = parse
| '"'               { parseString ("\""::state) lexbuf }
| '\\'              { parseString ("\\"::state) lexbuf }
| '/'               { parseString ("/"::state) lexbuf }
| 'f'               { parseString ("\f"::state) lexbuf }
| 'b'               { parseString ("\b"::state) lexbuf }
| 'r'               { parseString ("\r"::state) lexbuf }
| 'n'               { parseString ("\n"::state) lexbuf }
| 't'               { parseString ("\t"::state) lexbuf }