{
module JsonFSharp.Lexer
open System
open System.Globalization
open JsonFSharp.Parsers
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
let lexeme = Lexing.LexBuffer<_>.LexemeString 
}
let hexagonal = ['a'-'f''A'-'F''0'-'9']
let digit = ['0'-'9']
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')
let unicode = hexagonal hexagonal hexagonal hexagonal 

rule token = parse
| "\""          { parseString [] lexbuf }
| _
                {
                    let exceptionString = System.String.Format("Unrecognized character at line {0} column {1}",
                                                            lexbuf.EndPos.Line + 1,
                                                            lexbuf.EndPos.Column)
                    EXCEPTION exceptionString
                } 
| eof			{ EOF }
and parseString state = parse
| [^ '\\' '"']*     { let str = lexeme lexbuf
                      parseString (str::state) lexbuf }
| '\\'              { parseEscapeCharacter state lexbuf }
| '"'               { let str = state |> List.rev |> List.fold (+) ""
                      STRING(str) } 
and parseEscapeCharacter state = parse
| '"'               { parseString ("\""::state) lexbuf }
| '\\'              { parseString ("\\"::state) lexbuf }
| '/'               { parseString ("/"::state) lexbuf }
| 'f'               { parseString ("\f"::state) lexbuf }
| 'b'               { parseString ("\b"::state) lexbuf }
| 'r'               { parseString ("\r"::state) lexbuf }
| 'n'               { parseString ("\n"::state) lexbuf }
| 't'               { parseString ("\t"::state) lexbuf }
| 'u'               { parseUnicode state lexbuf }
and parseUnicode state = parse
| unicode           { let str = lexeme lexbuf
                      let v = Int32.Parse(str, NumberStyles.HexNumber)
                      let s = Char.ConvertFromUtf32(v)
                      parseString (s::state) lexbuf }
| _                 { EXCEPTION "unrecognized unicode string" }
